A3


class Node {
    int data;
    Node next;
    Node prev;

    Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublyLinkedList {
    Node head;

    // Method to insert a new node at the end of the list
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
            newNode.prev = current;
        }
    }

    // Method to display the list
    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " <-> ");
            current = current.next;
        }
        System.out.println("null");
    }

    // Method to sort the list using bubble sort
    public void sort() {
        if (head == null) return;

        boolean swapped;
        do {
            swapped = false;
            Node current = head;
            while (current.next != null) {
                if (current.data > current.next.data) {
                    // Swap data
                    int temp = current.data;
                    current.data = current.next.data;
                    current.next.data = temp;
                    swapped = true;
                }
                current = current.next;
            }
        } while (swapped);
    }

    // Method to merge two sorted doubly linked lists
    public static DoublyLinkedList merge(DoublyLinkedList list1, DoublyLinkedList list2) {
        DoublyLinkedList mergedList = new DoublyLinkedList();
        Node current1 = list1.head;
        Node current2 = list2.head;

        while (current1 != null && current2 != null) {
            if (current1.data <= current2.data) {
                mergedList.insert(current1.data);
                current1 = current1.next;
            } else {
                mergedList.insert(current2.data);
                current2 = current2.next;
            }
        }

        // If there are remaining nodes in list1
        while (current1 != null) {
            mergedList.insert(current1.data);
            current1 = current1.next;
        }

        // If there are remaining nodes in list2
        while (current2 != null) {
            mergedList.insert(current2.data);
            current2 = current2.next;
        }

        return mergedList;
    }
}

public class DoublyLinkedListDemo {
    public static void main(String[] args) {
        DoublyLinkedList list1 = new DoublyLinkedList();
        DoublyLinkedList list2 = new DoublyLinkedList();

        // Inserting elements into the first list
        list1.insert(4);
        list1.insert(2);
        list1.insert(5);
        list1.insert(1);
        System.out.println("List 1 before sorting:");
        list1.display();

        // Inserting elements into the second list
        list2.insert(3);
        list2.insert(6);
        list2.insert(0);
        System.out.println("List 2 before sorting:");
        list2.display();

        // Sorting both lists
        list1.sort();
        list2.sort();
        System.out.println("List 1 after sorting:");
        list1.display();
        System.out.println("List 2 after sorting:");
        list2.display();

        // Merging the two sorted lists
        DoublyLinkedList mergedList = DoublyLinkedList.merge(list1, list2);
        System.out.println("Merged sorted list:");
        mergedList.display();
    }
}
------------------------------------------------

package pro2;

import java.util.Scanner;

class Node {
    int data;
    Node next;
    Node prev;

    Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

class DoublyLinkedList {
    Node head;

    // Method to insert a new node at the end of the list
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode; // If the list is empty, set head to new node
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next; // Traverse to the end of the list
            }
            current.next = newNode; // Link the new node at the end
            newNode.prev = current; // Set the previous pointer
        }
        System.out.println("Inserted: " + data);
    }

    // Method to delete a node by value
    public void delete(int data) {
        if (head == null) {
            System.out.println("List is empty. Cannot delete.");
            return;
        }

        Node current = head;

        // If the node to be deleted is the head
        if (current.data == data) {
            head = current.next; // Move head to the next node
            if (head != null) {
                head.prev = null; // Set the previous pointer of the new head to null
            }
            System.out.println("Deleted: " + data);
            return;
        }

        // Traverse the list to find the node to delete
        while (current != null && current.data != data) {
            current = current.next;
        }

        // If the node was not found
        if (current == null) {
            System.out.println("Value " + data + " not found in the list.");
            return;
        }

        // Unlink the node from the list
        if (current.next != null) {
            current.next.prev = current.prev; // Link the next node's previous pointer
        }
        if (current.prev != null) {
            current.prev.next = current.next; // Link the previous node's next pointer
        }
        System.out.println("Deleted: " + data);
    }

    // Method to display the list
    public void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node current = head;
        System.out.print("Doubly Linked List: ");
        while (current != null) {
            System.out.print(current.data + " <-> ");
            current = current.next;
        }
        System.out.println("null");
    }
}

public class DoublyLinkedListMenu {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        DoublyLinkedList list = new DoublyLinkedList();
        int choice;

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Insert");
            System.out.println("2. Delete");
            System.out.println("3. Display");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value to insert: ");
                    int valueToInsert = scanner.nextInt();
                    list.insert(valueToInsert);
                    break;
                case 2:
                    System.out.print("Enter value to delete: ");
                    int valueToDelete = scanner.nextInt();
                    list.delete(valueToDelete);
                    break;
                case 3:
                    list.display();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 4);

        scanner.close();
    }
}
