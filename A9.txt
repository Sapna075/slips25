A9

import java.util.Arrays;

public class MergeSort {
    
    // Main function to implement Merge Sort
    public static void mergeSort(int[] array) {
        // Base case: if the array has 1 or 0 elements, it is already sorted
        if (array.length < 2) {
            return;
        }

        // Find the middle of the array
        int mid = array.length / 2;

        // Split the array into two halves
        int[] left = Arrays.copyOfRange(array, 0, mid);       // Left half
        int[] right = Arrays.copyOfRange(array, mid, array.length);  // Right half

        // Recursively sort both halves
        mergeSort(left);
        mergeSort(right);

        // Merge the sorted halves
        merge(array, left, right);
    }

    // Merge function to combine two sorted arrays into a single sorted array
    public static void merge(int[] array, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;

        // Merge the two sorted arrays while there are elements in both
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                array[k++] = left[i++];
            } else {
                array[k++] = right[j++];
            }
        }

        // If there are remaining elements in the left array, add them to the result
        while (i < left.length) {
            array[k++] = left[i++];
        }

        // If there are remaining elements in the right array, add them to the result
        while (j < right.length) {
            array[k++] = right[j++];
        }
    }

    // Helper function to print the array
    public static void printArray(int[] array) {
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    // Main driver method
    public static void main(String[] args) {
        int[] array = {38, 27, 43, 3, 9, 82, 10};

        System.out.println("Original Array:");
        printArray(array);

        // Call mergeSort to sort the array
        mergeSort(array);

        System.out.println("Sorted Array:");
        printArray(array);
    }
}
--------------------------------------------------------------------

public class HeapSort {

    // Method to perform heap sort
    public static void heapSort(int[] array) {
        int n = array.length;

        // Build max heap (rearrange the array to satisfy the heap property)
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(array, n, i);
        }

        // One by one extract elements from the heap
        for (int i = n - 1; i >= 0; i--) {
            // Move the current root (maximum element) to the end
            swap(array, 0, i);

            // Call heapify on the reduced heap
            heapify(array, i, 0);
        }
    }

    // Heapify a subtree rooted with node i, which is an index in array[].
    // n is the size of the heap
    private static void heapify(int[] array, int n, int i) {
        int largest = i; // Initialize largest as root
        int left = 2 * i + 1; // left = 2*i + 1
        int right = 2 * i + 2; // right = 2*i + 2

        // If left child is larger than root
        if (left < n && array[left] > array[largest]) {
            largest = left;
        }

        // If right child is larger than largest so far
        if (right < n && array[right] > array[largest]) {
            largest = right;
        }

        // If largest is not root, swap and continue heapifying
        if (largest != i) {
            swap(array, i, largest);
            heapify(array, n, largest);
        }
    }

    // Utility method to swap elements in the array
    private static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    // Utility method to print the array
    public static void printArray(int[] array) {
        for (int i = 0; i < array.length; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    // Main driver method
    public static void main(String[] args) {
        int[] array = {12, 11, 13, 5, 6, 7};

        System.out.println("Original Array:");
        printArray(array);

        // Perform heap sort
        heapSort(array);

        System.out.println("Sorted Array:");
        printArray(array);
    }
}
